# mypy: disable-error-code="override"

"""
Get metada data for the courts covered by the service
"""

import pathlib
from datetime import date
from typing import TYPE_CHECKING, NewType, Optional

if TYPE_CHECKING:
    from courts_schema_types_autogenerated import (  # type: ignore[import-not-found]
        RawCourt,
        RawCourtRepositoryData,
        RawJurisdiction,
    )
else:
    RawCourt = RawCourtRepositoryData = RawJurisdiction = None

from ruamel.yaml import YAML

CourtCode = NewType("CourtCode", str)
CourtParam = NewType("CourtParam", str)
JurisdictionCode = NewType("JurisdictionCode", str)


class Jurisdiction:
    def __init__(self, data: RawJurisdiction):
        self.code: JurisdictionCode = data["code"]
        self.name = data["name"]
        self.prefix: str = data.get("prefix")


class Court:
    def __init__(self, data: RawCourt) -> None:
        self.code: CourtCode = CourtCode(data["code"])
        self.name: str = data["name"]
        self.grouped_name: str = data.get("grouped_name") or data["name"]
        self.link: str = data["link"]
        self.ncn: Optional[str] = data.get("ncn")
        self.canonical_param: CourtParam = CourtParam(data.get("param"))
        self.param_aliases: list[CourtParam] = [CourtParam(data.get("param"))] + [
            CourtParam(extra_param) for extra_param in data.get("extra_params", [])
        ]

        self.start_year: Optional[int] = data.get("start_year")
        self.end_year: int = data.get("end_year") or date.today().year
        self.jurisdictions: list[Jurisdiction] = [
            Jurisdiction(jurisdiction_data) for jurisdiction_data in data.get("jurisdictions", [])
        ]

    def get_jurisdiction(self, code: str) -> Optional[Jurisdiction]:
        return next((j for j in self.jurisdictions if j.code == code), None)

    def expand_jurisdictions(self) -> list["Court"]:
        return [self] + [CourtWithJurisdiction(self, jurisdiction) for jurisdiction in self.jurisdictions]

    def __repr__(self) -> str:
        return self.name


class CourtWithJurisdiction(Court):
    def __init__(self, court: Court, jurisdiction: Jurisdiction) -> None:
        self.court: Court = court
        self.jurisdiction: Jurisdiction = jurisdiction
        self.jurisdictions: list[Jurisdiction] = []

    @property
    def code(self) -> CourtCode:
        return CourtCode("/".join((self.court.code, self.jurisdiction.code)))

    @property
    def name(self) -> str:
        return "%s â€“ %s" % (self.court.name, self.jurisdiction.name)

    @property
    def grouped_name(self) -> str:
        return self.court.grouped_name

    @property
    def link(self) -> str:
        return self.court.link

    @property
    def ncn(self) -> Optional[str]:
        return self.court.ncn

    @property
    def canonical_param(self) -> CourtParam:
        return self.court.canonical_param

    @property
    def param_aliases(self) -> list[CourtParam]:
        return self.court.param_aliases

    @property
    def start_year(self) -> Optional[int]:
        return self.court.start_year

    @property
    def end_year(self) -> int:
        return self.court.end_year

    @property
    def jurisdiction_prefix(self) -> Optional[str]:
        return self.jurisdiction.prefix


class CourtGroup:
    def __init__(self, name: Optional[str], courts: list[Court]) -> None:
        self.name: Optional[str] = name
        self.courts: list[Court] = courts

    @property
    def display_heading(self) -> bool:
        """Is this group displayed in the PUI?"""
        return self.name is not None


class CourtNotFoundException(Exception):
    pass


class CourtsRepository:
    def __init__(self, data: RawCourtRepositoryData):
        self._data = data
        self._byParam = {}
        self._byCode = {}
        for group in self._data:
            for courtData in group.get("courts"):
                court = Court(courtData)
                self._byParam[courtData.get("param")] = court
                self._byCode[courtData["code"]] = court

    def get_by_param(self, param: CourtParam) -> Court:
        try:
            return self._byParam[param]
        except KeyError:
            raise CourtNotFoundException()

    def get_court_by_code(self, code: CourtCode) -> Court:
        try:
            return self._byCode[code]
        except KeyError:
            raise CourtNotFoundException()

    def get_court_with_jurisdiction_by_code(
        self, court_code: CourtCode, jursidiction_code: JurisdictionCode
    ) -> CourtWithJurisdiction:
        court = self.get_court_by_code(court_code)
        if court is None:
            raise CourtNotFoundException()
        jurisdiction = court.get_jurisdiction(jursidiction_code)
        if jurisdiction is None:
            raise CourtNotFoundException()
        return CourtWithJurisdiction(court, jurisdiction)

    def get_by_code(self, code: CourtCode) -> Court:
        if "/" in code:
            (court_code, jurisdiction_code) = code.split("/")
            return self.get_court_with_jurisdiction_by_code(CourtCode(court_code), JurisdictionCode(jurisdiction_code))
        else:
            return self.get_court_by_code(code)

    def get_all(self, with_jurisdictions: bool = False) -> list[Court]:
        courts = [Court(court) for category in self._data for court in category.get("courts")]
        if with_jurisdictions:
            return [c for court in courts for c in court.expand_jurisdictions()]
        else:
            return courts

    def get_selectable(self) -> list[Court]:
        courts = []
        for category in self._data:
            for court in category.get("courts"):
                if court["selectable"]:
                    courts.append(Court(court))
        return courts

    def get_selectable_groups(self) -> list[CourtGroup]:
        groups = []
        for category in self._data:
            courts = [Court(court) for court in category.get("courts") if court["selectable"]]
            if len(courts) > 0:
                groups.append(CourtGroup(category.get("display_name"), courts))
        return groups

    def get_grouped_selectable_courts(self) -> list[CourtGroup]:
        groups = []
        for category in self._data:
            if not category.get("is_tribunal"):
                courts = [Court(court) for court in category.get("courts") if court["selectable"]]
                if len(courts) > 0:
                    groups.append(CourtGroup(category.get("display_name"), courts))
        return groups

    def get_grouped_selectable_tribunals(self) -> list[CourtGroup]:
        groups = []
        for category in self._data:
            if category.get("is_tribunal"):
                courts = [Court(court) for court in category.get("courts") if court["selectable"]]
                if len(courts) > 0:
                    groups.append(CourtGroup(category.get("display_name"), courts))
        return groups

    def get_listable_groups(self) -> list[CourtGroup]:
        groups = []
        for category in self._data:
            courts = [Court(court) for court in category.get("courts") if court["listable"]]
            if len(courts) > 0:
                groups.append(CourtGroup(category.get("display_name"), courts))
        return groups

    def get_listable_courts(self) -> list[Court]:
        courts = []
        for group in self._data:
            if not group.get("is_tribunal"):
                for court in group.get("courts", []):
                    if court["listable"]:
                        courts.append(Court(court))
        return courts

    def get_listable_tribunals(self) -> list[Court]:
        courts = []
        for group in self._data:
            if group.get("is_tribunal"):
                for court in group.get("courts", []):
                    if court["listable"]:
                        courts.append(Court(court))
        return courts


yaml = YAML()
datafile = pathlib.Path(__file__).parent / "data/court_names.yaml"
with open(datafile) as f:
    court_data: RawCourtRepositoryData = yaml.load(f)

courts = CourtsRepository(court_data)
